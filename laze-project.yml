contexts:
  # base context that all other contexts inherit from
  - name: default
    env:
      RIOTBASE_IN_TREE: target/RIOT
      RIOTBASE: $$(realpath -m ${relroot}/${RIOTBASE_IN_TREE})
      RIOT_URL: "https://github.com/kaspar030/RIOT -b riot.rs"
      CFLAGS_OPT: -Os

  # base context for all RIOT-rs applications
  - name: riot-rs
    selects:
      - ?newlib

    env:
      bindir: "${build-dir}/bin/${builder}/${app}"
      RUSTFLAGS:
        - "-Clink-arg=-Tlink.x"
      FEATURES:
        - riot-rs-boards/${BOARD}
      SCRIPTS: scripts
      # laze doesn't know the concept of "export" as make does, so each variable
      # that needs to be passed via environment needs to be listed in that rule
      # or task's command list.
      # "CARGO_ENV" and "RIOT_ENV" are used for that.
      CARGO_ENV:
        - >-
          BUILDING_RIOT_RS=1
          OPENOCD_ARGS="${OPENOCD_ARGS}"
          SCRIPTS=${relroot}/${SCRIPTS}
          CARGO_BUILD_TARGET=${RUSTC_TARGET}
          ${CARGO_TARGET_PREFIX}_RUNNER=${CARGO_RUNNER}
          ${CARGO_TARGET_PREFIX}_RUSTFLAGS="${RUSTFLAGS}"
          CARGO_TARGET_DIR=${relroot}/${build-dir}/bin/${builder}/${app}/cargo
      RIOT_ENV:
        - RIOTBASE=${RIOTBASE}
        - BOARD=${BOARD}
        - USEMODULE="${USEMODULE}"
        - NEWLIB_ARCH=${NEWLIB_ARCH}
        - CFLAGS="${CFLAGS}"
        - CFLAGS_OPT="${CFLAGS_OPT}"
        - EXTERNAL_MODULE_DIRS="${EXTERNAL_MODULE_DIRS}"
      BOARD: ${builder}
      PROFILE: release
      BAUDRATE: "115200"
      PORT: /dev/ttyACM0
      riot_binary: ${app}
      QEMU_SYSTEM_ARM: >-
        qemu-system-arm
        -machine ${QEMU_MACHINE}
        -nographic
        -serial mon:stdio
        -semihosting-config enable=on,target=native
        -kernel

    var_options:
      # this turns ${FEATURES} from a list to "--features=feature1,feature2"
      FEATURES:
        start: --features=
        joiner: ","

    rules:
      - name: LINK
        description: CARGO ${out}
        pool: console
        always: true
        cmd: >-
          cd ${relpath} && ${RIOT_ENV} ${CARGO_ENV} cargo ${CARGO_ARGS} ${TASK} --${PROFILE} ${FEATURES}
          && cp ${relroot}/${build-dir}/bin/${builder}/${app}/cargo/${RUSTC_TARGET}/${PROFILE}/${riot_binary} ${relroot}/${out}

    tasks:
      cargo:
        cmd:
          - cd ${relpath} && ${RIOT_ENV} ${CARGO_ENV} cargo
        build: false

      cargo-test:
        cmd:
          - cd ${relpath} && ${RIOT_ENV} ${CARGO_ENV} cargo test --${PROFILE} --features=riot-rs-boards/${builder} --manifest-path ${app}/Cargo.toml
        build: false

      debug:
        cmd:
          - cd ${relpath} && ${RIOT_ENV} ${CARGO_ENV} cargo ${CARGO_ARGS} run --${PROFILE} ${FEATURES}
        build: false
        ignore_ctrl_c: true

      gdb:
        cmd:
          - arm-none-eabi-gdb -ex "target extended-remote localhost:1234" ${out}
        build: false
        ignore_ctrl_c: true

      bloat:
        cmd:
          - cd ${relpath} && ${RIOT_ENV} ${CARGO_ENV} cargo ${CARGO_ARGS} bloat --${PROFILE} ${FEATURES}
        build: false

      flash:
        cmd:
          - >-
            _flash () { openocd
            ${OPENOCD_ADAPTER_INIT}
            ${OPENOCD_ARGS}
            -c 'init'
            -c 'targets'
            -c 'reset halt'
            -c "flash write_image erase \"${1}\" 0 elf"
            -c "verify_image \"${1}\" 0 elf"
            -c 'reset run'
            -c 'shutdown' ; } ;
            _flash ${out}

      flash-riotboot:
        cmd:
          - riotboot-genhdr generate ${out} $(date +%s) $((${FLASH_OFFSET} + ${FLASH_SLOT_OFFSET})) ${FLASH_SLOT_OFFSET} - > ${out}.hdr.bin
          - ${OBJCOPY} -Obinary ${out} ${out}.bin
          - cat ${out}.hdr.bin ${out}.bin > ${out}.riotboot.bin
          - _flash () { openocd
            ${OPENOCD_ARGS}
            -c 'init'
            -c 'targets'
            -c 'reset halt'
            -c "flash write_image erase \"${1}.riotboot.bin\" ${FLASH_OFFSET} bin"
            -c "verify_image \"${1}.riotboot.bin\" ${FLASH_OFFSET} bin"
            -c 'reset run'
            -c 'shutdown' ; } ;
            _flash ${out}

      reset:
        build: false
        cmd:
          - >-
            openocd
            ${OPENOCD_ARGS}
            -c 'init'
            -c 'targets'
            -c 'reset'
            -c 'shutdown'
      term:
        build: false
        cmd:
          - picocom -b ${BAUDRATE} --imap lfcrlf ${PORT}

      size:
        cmd:
          - llvm-size ${out}

  - name: cortex-m
    parent: riot-rs
    env:
      OBJCOPY: arm-none-eabi-objcopy

  - name: thumbv6m-none-eabi
    parent: cortex-m
    env:
      RUSTC_TARGET: thumbv6m-none-eabi
      CARGO_TARGET_PREFIX: CARGO_TARGET_THUMBV6M_NONE_EABI
      NEWLIB_ARCH: thumb/v6-m/nofp

  - name: thumbv7em-none-eabi
    parent: cortex-m
    env:
      RUSTC_TARGET: thumbv7em-none-eabi
      CARGO_TARGET_PREFIX: CARGO_TARGET_THUMBV7EM_NONE_EABI
      NEWLIB_ARCH: thumb/v7e-m/nofp

  - name: thumbv7m-none-eabi
    parent: cortex-m
    env:
      RUSTC_TARGET: thumbv7m-none-eabi
      CARGO_TARGET_PREFIX: CARGO_TARGET_THUMBV7M_NONE_EABI
      NEWLIB_ARCH: thumb/v7-m/nofp

  - name: thumbv7em-none-eabihf
    parent: cortex-m
    env:
      RUSTC_TARGET: thumbv7em-none-eabihf
      CARGO_ENV_TARGET: CARGO_TARGET_THUMBV7EM_NONE_EABIHF
      NEWLIB_ARCH: v7e-m+fp/hard

  - name: microbit-base
    # this is a context, not a builder, to be used as parent by  "microbit" and
    # "microbit-qemu"
    parent: thumbv6m-none-eabi
    env:
      # override "${builder}"
      BOARD: microbit
      OPENOCD_ARGS:
        - "-f board/nordic_nrf52_dk.cfg"

  - name: nrf52
    parent: thumbv7em-none-eabi # actually eabihf, but riot-rs doesn't support hard float yet
    env:
      CARGO_RUNNER:
        - ${SCRIPTS}/debug-openocd.sh
      OPENOCD_ARGS:
        - "-f board/nordic_nrf52_dk.cfg"

  - name: nrf52832
    parent: nrf52

  - name: nrf52840
    parent: nrf52
    env:
      PROBE_RS_CHIP: nrf52840

    tasks:
      flash-rs:
        cmd:
          - probe-rs-cli download ${out} --chip ${PROBE_RS_CHIP}

modules:
  - name: release
    selects:
      - release-arch
      - ?silent-panic
      - ?lto

  - name: release-arch
    context: cortex-m
    selects:
      - ?no-semihosting

  - name: no-semihosting
    context: cortex-m
    env:
      global:
        FEATURES:
          - riot-rs/no-semihosting

  - name: silent-panic
    context: riot-rs
    env:
      global:
        FEATURES:
          - riot-rs/silent-panic

  - name: lto
    context: riot-rs
    selects:
      - ?lto-riot
    env:
      global:
        RUSTFLAGS:
          - -Cembed-bitcode=yes
          - -Clto=fat
          - -Ccodegen-units=1

  - name: lto-riot
    context: riot-rs
    env:
      global:
        RIOT_ENV:
          - LTO=1

  - name: no_overflow_checks
    context: riot-rs
    env:
      global:
        RUSTFLAGS:
          - -Coverflow-checks=off

  - name: opt_speed
    context: riot-rs
    env:
      global:
        RUSTFLAGS:
          - -Copt-level=3
        # note: this overrides CFLAGS_OPT in riot-rs context
        CFLAGS_OPT: -O3

  - name: opt_size
    context: riot-rs
    env:
      global:
        RUSTFLAGS:
          - -Copt-level=z
        # note: this overrides CFLAGS_OPT in riot-rs context
        CFLAGS_OPT: -Oz

  - name: thread_info
    # enable thread names & stack info
    context: riot-rs
    env:
      global:
        FEATURES:
          - riot-rs/thread_info
        CFLAGS:
          - -DCONFIG_THREAD_NAMES

  - name: cross-language-lto
    # use clang/lld to link, enables cross-language LTO.
    # This requires rustc's llvm and clang's llvm version to match.
    context: riot-rs
    depends:
      - lto
    env:
      global:
        RUSTFLAGS:
          - "-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Clink-arg=--target=${RUSTC_TARGET}"

  - name: riotboot
    context: nrf52840
    env:
      global:
        FLASH_OFFSET: "0x2000"
        FLASH_SLOT_OFFSET: "0x400"
        CARGO_ENV:
          - NRF52840_FLASH_OFFSET=${FLASH_OFFSET}
          - NRF52840_FLASH_SLOT_OFFSET=${FLASH_SLOT_OFFSET}
          - NRF52840_FLASH_SLOT=0

  - name: libc_default
    context: riot-rs
    selects:
      - riot_libc|newlib

  - name: newlib
    context: riot-rs
    env:
      global:
        FEATURES:
          - riot-rs/newlib

  - name: riot_libc
    context: riot-rs
    env:
      global:
        USEMODULE:
          - libc

  - name: testable
    context: lm3s6965evb

builders:
  # host builder (for housekeeping tasks)
  - name: host
    rules:
      # currently, laze requires a LINK rule for every context/builder
      # that gets an application configured.
      # so, provide a dummy one
      - name: LINK
        cmd: "true"

    tasks:
      install-toolchain:
        build: false
        cmd:
          - rustup target add thumbv7m-none-eabi
          - rustup target add thumbv7em-none-eabi
          - rustup target add thumbv7em-none-eabihf

      install-c2rust:
        build: false
        cmd:
          - echo "Installing riot-sys compatible version of c2rust."
          - 'echo "WARNING: This uses *a lot* of memory!"'
          - cargo install --git https://github.com/immunant/c2rust c2rust

      clone-riot:
        build: false
        cmd:
          - set -e
          - test -f ${RIOTBASE}/.cloned || git clone ${RIOT_URL} ${RIOTBASE} && touch ${RIOTBASE}/.cloned

  - name: nrf52dk
    parent: nrf52832

  - name: nrf52840dk
    parent: nrf52840

  - name: dwm1001
    parent: nrf52832

  - name: nrf52840-mdk
    parent: nrf52840
    env:
      OPENOCD_ADAPTER_INIT:
        - " -c 'source [find interface/cmsis-dap.cfg]'"

  - name: microbit
    parent: microbit-base
    env:
      CARGO_RUNNER:
        - ${SCRIPTS}/debug-openocd.sh
      OPENOCD_ARGS:
        - "-f board/nordic_nrf52_dk.cfg"

  - name: microbit-qemu
    parent: microbit-base
    env:
      CARGO_RUNNER:
        - '"qemu-system-arm -machine microbit -nographic -semihosting-config enable=on,target=native -s -S -kernel"'
      QEMU_MACHINE: microbit
    tasks:
      qemu:
        build: true
        cmd:
          - ${QEMU_SYSTEM_ARM} ${out}

    disables:
      - periph_rtt

  - name: lm3s6965evb
    parent: thumbv7m-none-eabi # actually eabihf, but riot-rs doesn't support hard float yet
    disables:
      - riot_support
    env:
      QEMU_MACHINE: lm3s6965evb -cpu cortex-m3
      CARGO_RUNNER:
        - '"qemu-system-arm -cpu cortex-m3 -machine lm3s6965evb -nographic -semihosting-config enable=on,target=native -kernel"'
    tasks:
      qemu:
        build: true
        cmd:
          - ${QEMU_SYSTEM_ARM} ${out}

apps:
  # define a dummy host application so the host tasks work
  - name: host
    context: host

subdirs:
  - examples
  - src
